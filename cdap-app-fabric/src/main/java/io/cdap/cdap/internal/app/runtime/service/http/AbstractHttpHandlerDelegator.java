/*
 * Copyright Â© 2014-2019 Cask Data, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */

package io.cdap.cdap.internal.app.runtime.service.http;

import com.google.common.base.Preconditions;
import io.cdap.cdap.api.annotation.TransactionControl;
import io.cdap.cdap.api.metrics.MetricsContext;
import io.cdap.cdap.api.service.http.HttpContentConsumer;
import io.cdap.cdap.api.service.http.HttpContentProducer;
import io.cdap.cdap.api.service.http.HttpServiceRequest;
import io.cdap.cdap.common.lang.CombineClassLoader;
import io.cdap.cdap.internal.app.runtime.ThrowingRunnable;
import io.cdap.http.BodyConsumer;
import io.cdap.http.BodyProducer;
import io.cdap.http.HandlerContext;
import io.cdap.http.HttpHandler;
import io.cdap.http.HttpResponder;
import io.netty.handler.codec.http.HttpRequest;
import org.apache.twill.common.Cancellable;

/**
 * An abstract base class for all {@link HttpHandler} generated through the {@link
 * HttpHandlerGenerator}.
 *
 * @param <T> Type of the user http service handler
 */
public abstract class AbstractHttpHandlerDelegator<T> implements HttpHandler {

  private final DelegatorContext<T> context;
  private MetricsContext metricsContext;

  protected AbstractHttpHandlerDelegator(DelegatorContext<T> context,
      MetricsContext metricsContext) {
    this.context = context;
    this.metricsContext = metricsContext;
  }

  @Override
  public void init(HandlerContext context) {
  }

  @Override
  public void destroy(HandlerContext context) {
  }

  /**
   * Executes a given {@link ThrowingRunnable} with or without a transaction.
   *
   * @param runnable the runnable to call
   * @param transactional decide whether transaction is needed or not
   * @throws Exception if there is exception, either caused by the runnable or by the
   *     transaction system.
   */
  protected final void execute(ThrowingRunnable runnable, boolean transactional) throws Exception {
    context.getServiceTaskExecutor().execute(runnable, transactional);
  }

  /**
   * Returns the user http service handler associated with the current thread. This method is called
   * from handler class generated by {@link HttpHandlerGenerator}.
   */
  protected final T getHandler() {
    return context.getHandler();
  }

  /**
   * Returns a new instance of {@link HttpServiceRequest} that wraps around the given {@link
   * HttpRequest} object. This method is called from handler class generated by {@link
   * HttpHandlerGenerator}.
   */
  @SuppressWarnings("unused")
  protected final HttpServiceRequest wrapRequest(HttpRequest request) {
    return new DefaultHttpServiceRequest(request);
  }

  /**
   * Returns a new instance of {@link DelayedHttpServiceResponder} that wraps around the given
   * {@link HttpResponder} object. This method is called from handler class generated by {@link
   * HttpHandlerGenerator}.
   */
  @SuppressWarnings("unused")
  protected final DelayedHttpServiceResponder wrapResponder(HttpResponder responder,
      TransactionControl defaultTxControl) {
    return new DelayedHttpServiceResponder(responder, new BodyProducerFactory() {
      @Override
      public BodyProducer create(HttpContentProducer contentProducer,
          ServiceTaskExecutor taskExecutor) {
        final ClassLoader programContextClassLoader = new CombineClassLoader(
            null, contentProducer.getClass().getClassLoader(), getClass().getClassLoader());

        // Capture the context since we need to keep it until the end of the content producing.
        // We don't need to worry about double capturing of the context when HttpContentConsumer is used.
        // This is because when HttpContentConsumer is used, the responder constructed here will get closed and this
        // BodyProducerFactory won't be used.
        return new BodyProducerAdapter(contentProducer, taskExecutor, context.capture(),
            defaultTxControl);
      }
    }, context.getServiceTaskExecutor(), metricsContext);
  }

  /**
   * Returns a new instance of {@link BodyConsumer} that wraps around the given {@link
   * HttpContentConsumer} and {@link DelayedHttpServiceResponder}.
   *
   * IMPORTANT: This method will also capture the context associated with the current thread, hence
   * after this method is called, no other methods on this class should be called from the current
   * thread.
   *
   * This method is called from handler class generated by {@link HttpHandlerGenerator}.
   */
  @SuppressWarnings("unused")
  protected final BodyConsumer wrapContentConsumer(HttpContentConsumer consumer,
      DelayedHttpServiceResponder responder,
      TransactionControl defaultTxControl) {
    Preconditions.checkState(!responder.hasBufferedResponse(),
        "HttpContentConsumer may not be used after a response has already been sent.");
    // Close the provided responder since a new one will be created for the BodyConsumerAdapter to use.
    responder.close();

    ServiceTaskExecutor taskExecutor = context.getServiceTaskExecutor();
    Cancellable contextReleaser = context.capture();

    return new BodyConsumerAdapter(
        new DelayedHttpServiceResponder(responder, (contentProducer, txServiceContext) ->
            // Transfer the captured context from the content consumer to the content producer
            new BodyProducerAdapter(contentProducer, txServiceContext, contextReleaser,
                defaultTxControl)
        ), consumer, taskExecutor, contextReleaser, defaultTxControl);
  }
}
